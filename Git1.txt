Git known as version control system. 

Free, Open source and distributed.

Version control is a software that track and manage changes to files over time.


GIT - it is a version control software that runs locally on your machine.
GITHUB - it is a sevice that hosts Git repositories in the cloud and makes it easier to collabrate with other people.

Git was created as command-line-tool. To use it, we run various git commands in a unix shell.(not so user friendly).

User friendlyy - GUI's
Github Desktop
Tower
SourceTree
GitKraken
Ungit


Git installed.

configured username and email.

git status - gives information on the current status of a git repoitory and its contents.


git init - will intialize git repository in folder of choice to be tracked.


git add <file|folder> Pick changes to go into next commit
git add file - Pick individual file
git add folder/ - Pick all files inside a folder (and subfolders)
git add . - Pick all files (in folder command line is running in)
git restore <file>..." to discard changes in working directory if you made changes in file thats already added to staging area.


git rm --cached <file> -  to unstage that was added but not commited


git commit will actually commit changes from the staging area
git commit -m "message" - Creates a commit with a message attached
git commit -m "message" --amend - Update previous commit instead of creating new one.


git log View the commit history
git log --all - Show all commits (not just current branch)
git log --all --graph - Show branching visually in the command line


.gitignore - Tell git which files/folders it SHOULD NOT track.
The rules for the patterns you can put in the .gitignore file are as follows:

    Blank lines or lines starting with # are ignored.

    Standard glob patterns work, and will be applied recursively throughout the entire working tree.

    You can start patterns with a forward slash (/) to avoid recursivity.

    You can end patterns with a forward slash (/) to specify a directory.

    You can negate a pattern by starting it with an exclamation point (!).


git diff - git diff shows you the exact lines added and removed — the patch but not yet staged
git diff --staged - to see what you’ve staged that will go into your next commit


rm -rf .git -  Remove git from project


Repository = a folder containing code where any changes to the code are tracked by git.
(To create a repository, we create a new folder on our computer, and then run git init )

GitHub = a service that lets us save our git repositories online. It also helps us:
- backup our code in case we delete it on our computer
- see the history of our code changes more easily
- alternatives include Bitbucket and GitLab
Local repository = a git repository saved on our computer
Remote repository = a git repository saved online (for example on GitHub)

Branching
Branching = create a copy of the version history that we can work on without affecting the
original version history. This lets us work on multiple things (features + fixes) at the same time.

git branch <branch_name> - Creates a new branch
git branch feature1 - Create a new branch named feature1
git checkout <branch_name> - Switch to a different branch and start working on that branch
git checkout feature1 - Switch to the feature1 branch. New commits will now be added to the feature1 branch

HEAD = points to which branch we are currently working on
HEAD -> feature1 = we are currently working on the feature1 branch. Any new commits will
be added to the feature1 branch

git branch -D <branch_name> - Deletes a branch
git branch -D feature1 - Deletes the feature1 branch


git reflog -  shows a list of all commits that have been made in this repo, as well as some other key events, like when switching between branches (checkout). Each commit is identified by a SHA-1 hash (before the commit message). You can use these SHA-1 IDs to travel to any commit whenever you want. 


git stash - The git stash command will discard all your untracked files, as well as staged and unstaged modifications. However, Git will temporarily save them, in case you want to retrieve them later.


git checkout --<file> - This works similarly to git stash, except that it discards changes to a file permanently.


git reset --hard "SHA-1ID's"- This also discards all changes permanently. if we commited and want to reset that is already commited then will use this. SHA-1 ID's can been see using git reflog


